// Code generated by Kitex v0.10.0. DO NOT EDIT.

package baseline

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/kitex/pkg/protocol/bthrift"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = bthrift.BinaryWriter(nil)
)

func (p *Simple) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Simple[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Simple) FastReadField1(buf []byte) (int, error) {
	offset := 0

	var _field int8
	if v, l, err := bthrift.Binary.ReadByte(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.ByteField = _field
	return offset, nil
}

func (p *Simple) FastReadField2(buf []byte) (int, error) {
	offset := 0

	var _field int64
	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I64Field = _field
	return offset, nil
}

func (p *Simple) FastReadField3(buf []byte) (int, error) {
	offset := 0

	var _field float64
	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.DoubleField = _field
	return offset, nil
}

func (p *Simple) FastReadField4(buf []byte) (int, error) {
	offset := 0

	var _field int32
	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I32Field = _field
	return offset, nil
}

func (p *Simple) FastReadField5(buf []byte) (int, error) {
	offset := 0

	var _field string
	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.StringField = _field
	return offset, nil
}

func (p *Simple) FastReadField6(buf []byte) (int, error) {
	offset := 0

	var _field []byte
	if v, l, err := bthrift.Binary.ReadBinary(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = []byte(v)

	}
	p.BinaryField = _field
	return offset, nil
}

func (p *Simple) FastReadField7(buf []byte) (int, error) {
	offset := 0

	var _field Enums
	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = Enums(v)

	}
	p.EnumField = _field
	return offset, nil
}

// for compatibility
func (p *Simple) FastWrite(buf []byte) int {
	return 0
}

func (p *Simple) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "Simple")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *Simple) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("Simple")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *Simple) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ByteField", thrift.BYTE, 1)
	offset += bthrift.Binary.WriteByte(buf[offset:], p.ByteField)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Simple) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I64Field", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.I64Field)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Simple) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "DoubleField", thrift.DOUBLE, 3)
	offset += bthrift.Binary.WriteDouble(buf[offset:], p.DoubleField)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Simple) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I32Field", thrift.I32, 4)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.I32Field)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Simple) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "StringField", thrift.STRING, 5)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.StringField)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Simple) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "BinaryField", thrift.STRING, 6)
	offset += bthrift.Binary.WriteBinaryNocopy(buf[offset:], binaryWriter, []byte(p.BinaryField))
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Simple) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "enumField", thrift.I32, 7)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.EnumField))
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Simple) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ByteField", thrift.BYTE, 1)
	l += bthrift.Binary.ByteLength(p.ByteField)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Simple) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("I64Field", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.I64Field)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Simple) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("DoubleField", thrift.DOUBLE, 3)
	l += bthrift.Binary.DoubleLength(p.DoubleField)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Simple) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("I32Field", thrift.I32, 4)
	l += bthrift.Binary.I32Length(p.I32Field)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Simple) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("StringField", thrift.STRING, 5)
	l += bthrift.Binary.StringLengthNocopy(p.StringField)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Simple) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("BinaryField", thrift.STRING, 6)
	l += bthrift.Binary.BinaryLengthNocopy([]byte(p.BinaryField))
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Simple) field7Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("enumField", thrift.I32, 7)
	l += bthrift.Binary.I32Length(int32(p.EnumField))
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.BYTE {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField15(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Nesting[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Nesting) FastReadField1(buf []byte) (int, error) {
	offset := 0

	var _field string
	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.String_ = _field
	return offset, nil
}

func (p *Nesting) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]*Simple, 0, size)
	values := make([]Simple, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ListSimple = _field
	return offset, nil
}

func (p *Nesting) FastReadField3(buf []byte) (int, error) {
	offset := 0

	var _field float64
	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.Double = _field
	return offset, nil
}

func (p *Nesting) FastReadField4(buf []byte) (int, error) {
	offset := 0

	var _field int32
	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I32 = _field
	return offset, nil
}

func (p *Nesting) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ListI32 = _field
	return offset, nil
}

func (p *Nesting) FastReadField6(buf []byte) (int, error) {
	offset := 0

	var _field int64
	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I64 = _field
	return offset, nil
}

func (p *Nesting) FastReadField7(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapStringString = _field
	return offset, nil
}

func (p *Nesting) FastReadField8(buf []byte) (int, error) {
	offset := 0
	_field := NewSimple()
	if l, err := _field.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.SimpleStruct = _field
	return offset, nil
}

func (p *Nesting) FastReadField9(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[int32]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapI32I64 = _field
	return offset, nil
}

func (p *Nesting) FastReadField10(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ListString = _field
	return offset, nil
}

func (p *Nesting) FastReadField11(buf []byte) (int, error) {
	offset := 0

	var _field []byte
	if v, l, err := bthrift.Binary.ReadBinary(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = []byte(v)

	}
	p.Binary = _field
	return offset, nil
}

func (p *Nesting) FastReadField12(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[int64]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapI64String = _field
	return offset, nil
}

func (p *Nesting) FastReadField13(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ListI64 = _field
	return offset, nil
}

func (p *Nesting) FastReadField14(buf []byte) (int, error) {
	offset := 0

	var _field int8
	if v, l, err := bthrift.Binary.ReadByte(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.Byte = _field
	return offset, nil
}

func (p *Nesting) FastReadField15(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[string]*Simple, size)
	values := make([]Simple, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_val := &values[i]
		_val.InitDefault()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapStringSimple = _field
	return offset, nil
}

// for compatibility
func (p *Nesting) FastWrite(buf []byte) int {
	return 0
}

func (p *Nesting) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "Nesting")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField15(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *Nesting) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("Nesting")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
		l += p.field15Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *Nesting) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "String", thrift.STRING, 1)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.String_)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ListSimple", thrift.LIST, 2)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.ListSimple {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Double", thrift.DOUBLE, 3)
	offset += bthrift.Binary.WriteDouble(buf[offset:], p.Double)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I32", thrift.I32, 4)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.I32)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ListI32", thrift.LIST, 5)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
	var length int
	for _, v := range p.ListI32 {
		length++
		offset += bthrift.Binary.WriteI32(buf[offset:], v)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I64", thrift.I64, 6)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.I64)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapStringString", thrift.MAP, 7)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
	var length int
	for k, v := range p.MapStringString {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "SimpleStruct", thrift.STRUCT, 8)
	offset += p.SimpleStruct.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapI32I64", thrift.MAP, 9)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I64, 0)
	var length int
	for k, v := range p.MapI32I64 {
		length++
		offset += bthrift.Binary.WriteI32(buf[offset:], k)
		offset += bthrift.Binary.WriteI64(buf[offset:], v)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I64, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ListString", thrift.LIST, 10)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRING, 0)
	var length int
	for _, v := range p.ListString {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRING, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Binary", thrift.STRING, 11)
	offset += bthrift.Binary.WriteBinaryNocopy(buf[offset:], binaryWriter, []byte(p.Binary))
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapI64String", thrift.MAP, 12)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.STRING, 0)
	var length int
	for k, v := range p.MapI64String {
		length++
		offset += bthrift.Binary.WriteI64(buf[offset:], k)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.STRING, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ListI64", thrift.LIST, 13)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.I64, 0)
	var length int
	for _, v := range p.ListI64 {
		length++
		offset += bthrift.Binary.WriteI64(buf[offset:], v)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I64, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Byte", thrift.BYTE, 14)
	offset += bthrift.Binary.WriteByte(buf[offset:], p.Byte)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) fastWriteField15(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapStringSimple", thrift.MAP, 15)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
	var length int
	for k, v := range p.MapStringSimple {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("String", thrift.STRING, 1)
	l += bthrift.Binary.StringLengthNocopy(p.String_)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ListSimple", thrift.LIST, 2)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.ListSimple))
	for _, v := range p.ListSimple {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Double", thrift.DOUBLE, 3)
	l += bthrift.Binary.DoubleLength(p.Double)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("I32", thrift.I32, 4)
	l += bthrift.Binary.I32Length(p.I32)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ListI32", thrift.LIST, 5)
	l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.ListI32))
	var tmpV int32
	l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.ListI32)
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("I64", thrift.I64, 6)
	l += bthrift.Binary.I64Length(p.I64)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field7Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapStringString", thrift.MAP, 7)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.MapStringString))
	for k, v := range p.MapStringString {

		l += bthrift.Binary.StringLengthNocopy(k)
		l += bthrift.Binary.StringLengthNocopy(v)
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field8Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("SimpleStruct", thrift.STRUCT, 8)
	l += p.SimpleStruct.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field9Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapI32I64", thrift.MAP, 9)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I64, len(p.MapI32I64))
	var tmpK int32
	var tmpV int64
	l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I64Length(int64(tmpV))) * len(p.MapI32I64)
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field10Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ListString", thrift.LIST, 10)
	l += bthrift.Binary.ListBeginLength(thrift.STRING, len(p.ListString))
	for _, v := range p.ListString {
		l += bthrift.Binary.StringLengthNocopy(v)
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field11Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Binary", thrift.STRING, 11)
	l += bthrift.Binary.BinaryLengthNocopy([]byte(p.Binary))
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field12Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapI64String", thrift.MAP, 12)
	l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.STRING, len(p.MapI64String))
	for k, v := range p.MapI64String {

		l += bthrift.Binary.I64Length(k)
		l += bthrift.Binary.StringLengthNocopy(v)
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field13Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ListI64", thrift.LIST, 13)
	l += bthrift.Binary.ListBeginLength(thrift.I64, len(p.ListI64))
	var tmpV int64
	l += bthrift.Binary.I64Length(int64(tmpV)) * len(p.ListI64)
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field14Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Byte", thrift.BYTE, 14)
	l += bthrift.Binary.ByteLength(p.Byte)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting) field15Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapStringSimple", thrift.MAP, 15)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(p.MapStringSimple))
	for k, v := range p.MapStringSimple {

		l += bthrift.Binary.StringLengthNocopy(k)
		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.SET {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Nesting2[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Nesting2) FastReadField1(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[*Simple]*Nesting, size)
	values := make([]Nesting, size)
	for i := 0; i < size; i++ {
		_key := NewSimple()
		if l, err := _key.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_val := &values[i]
		_val.InitDefault()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapSimpleNesting = _field
	return offset, nil
}

func (p *Nesting2) FastReadField2(buf []byte) (int, error) {
	offset := 0
	_field := NewSimple()
	if l, err := _field.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.SimpleStruct = _field
	return offset, nil
}

func (p *Nesting2) FastReadField3(buf []byte) (int, error) {
	offset := 0

	var _field int8
	if v, l, err := bthrift.Binary.ReadByte(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.Byte = _field
	return offset, nil
}

func (p *Nesting2) FastReadField4(buf []byte) (int, error) {
	offset := 0

	var _field float64
	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.Double = _field
	return offset, nil
}

func (p *Nesting2) FastReadField5(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]*Nesting, 0, size)
	values := make([]Nesting, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ListNesting = _field
	return offset, nil
}

func (p *Nesting2) FastReadField6(buf []byte) (int, error) {
	offset := 0

	var _field int64
	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I64 = _field
	return offset, nil
}

func (p *Nesting2) FastReadField7(buf []byte) (int, error) {
	offset := 0
	_field := NewNesting()
	if l, err := _field.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.NestingStruct = _field
	return offset, nil
}

func (p *Nesting2) FastReadField8(buf []byte) (int, error) {
	offset := 0

	var _field []byte
	if v, l, err := bthrift.Binary.ReadBinary(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = []byte(v)

	}
	p.Binary = _field
	return offset, nil
}

func (p *Nesting2) FastReadField9(buf []byte) (int, error) {
	offset := 0

	var _field string
	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.String_ = _field
	return offset, nil
}

func (p *Nesting2) FastReadField10(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadSetBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]*Nesting, 0, size)
	values := make([]Nesting, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadSetEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.SetNesting = _field
	return offset, nil
}

func (p *Nesting2) FastReadField11(buf []byte) (int, error) {
	offset := 0

	var _field int32
	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I32 = _field
	return offset, nil
}

// for compatibility
func (p *Nesting2) FastWrite(buf []byte) int {
	return 0
}

func (p *Nesting2) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "Nesting2")
	if p != nil {
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *Nesting2) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("Nesting2")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *Nesting2) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapSimpleNesting", thrift.MAP, 1)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRUCT, thrift.STRUCT, 0)
	var length int
	for k, v := range p.MapSimpleNesting {
		length++
		offset += k.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRUCT, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "SimpleStruct", thrift.STRUCT, 2)
	offset += p.SimpleStruct.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Byte", thrift.BYTE, 3)
	offset += bthrift.Binary.WriteByte(buf[offset:], p.Byte)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Double", thrift.DOUBLE, 4)
	offset += bthrift.Binary.WriteDouble(buf[offset:], p.Double)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ListNesting", thrift.LIST, 5)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.ListNesting {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I64", thrift.I64, 6)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.I64)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "NestingStruct", thrift.STRUCT, 7)
	offset += p.NestingStruct.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "Binary", thrift.STRING, 8)
	offset += bthrift.Binary.WriteBinaryNocopy(buf[offset:], binaryWriter, []byte(p.Binary))
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "String", thrift.STRING, 9)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.String_)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "SetNesting", thrift.SET, 10)
	setBeginOffset := offset
	offset += bthrift.Binary.SetBeginLength(thrift.STRUCT, 0)

	for i := 0; i < len(p.SetNesting); i++ {
		for j := i + 1; j < len(p.SetNesting); j++ {
			if func(tgt, src *Nesting) bool {
				if !tgt.DeepEqual(src) {
					return false
				}
				return true
			}(p.SetNesting[i], p.SetNesting[j]) {
				panic(fmt.Errorf("%T error writing set field: slice is not unique", p.SetNesting[i]))
			}
		}
	}
	var length int
	for _, v := range p.SetNesting {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteSetBegin(buf[setBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteSetEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I32", thrift.I32, 11)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.I32)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *Nesting2) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapSimpleNesting", thrift.MAP, 1)
	l += bthrift.Binary.MapBeginLength(thrift.STRUCT, thrift.STRUCT, len(p.MapSimpleNesting))
	for k, v := range p.MapSimpleNesting {

		l += k.BLength()
		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("SimpleStruct", thrift.STRUCT, 2)
	l += p.SimpleStruct.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Byte", thrift.BYTE, 3)
	l += bthrift.Binary.ByteLength(p.Byte)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Double", thrift.DOUBLE, 4)
	l += bthrift.Binary.DoubleLength(p.Double)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ListNesting", thrift.LIST, 5)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.ListNesting))
	for _, v := range p.ListNesting {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("I64", thrift.I64, 6)
	l += bthrift.Binary.I64Length(p.I64)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field7Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("NestingStruct", thrift.STRUCT, 7)
	l += p.NestingStruct.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field8Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("Binary", thrift.STRING, 8)
	l += bthrift.Binary.BinaryLengthNocopy([]byte(p.Binary))
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field9Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("String", thrift.STRING, 9)
	l += bthrift.Binary.StringLengthNocopy(p.String_)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field10Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("SetNesting", thrift.SET, 10)
	l += bthrift.Binary.SetBeginLength(thrift.STRUCT, len(p.SetNesting))

	for i := 0; i < len(p.SetNesting); i++ {
		for j := i + 1; j < len(p.SetNesting); j++ {
			if func(tgt, src *Nesting) bool {
				if !tgt.DeepEqual(src) {
					return false
				}
				return true
			}(p.SetNesting[i], p.SetNesting[j]) {
				panic(fmt.Errorf("%T error writing set field: slice is not unique", p.SetNesting[i]))
			}
		}
	}
	for _, v := range p.SetNesting {
		l += v.BLength()
	}
	l += bthrift.Binary.SetEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *Nesting2) field11Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("I32", thrift.I32, 11)
	l += bthrift.Binary.I32Length(p.I32)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.SET {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DefaultValues[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DefaultValues) FastReadField1(buf []byte) (int, error) {
	offset := 0

	var _field int8
	if v, l, err := bthrift.Binary.ReadByte(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.ByteFieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField2(buf []byte) (int, error) {
	offset := 0

	var _field int64
	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I64FieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField3(buf []byte) (int, error) {
	offset := 0

	var _field float64
	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.DoubleFieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField4(buf []byte) (int, error) {
	offset := 0

	var _field int32
	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I32FieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField5(buf []byte) (int, error) {
	offset := 0

	var _field string
	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.StringFieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField6(buf []byte) (int, error) {
	offset := 0

	var _field []byte
	if v, l, err := bthrift.Binary.ReadBinary(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = []byte(v)

	}
	p.BinaryFieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField7(buf []byte) (int, error) {
	offset := 0

	var _field Enums
	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = Enums(v)

	}
	p.EnumFieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField8(buf []byte) (int, error) {
	offset := 0
	_field := NewSimple()
	if l, err := _field.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.SimpleStructWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField9(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ListFieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField10(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadSetBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadSetEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.SetFieldWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField11(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[int32]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapI32I64WithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField12(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[int64]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapI64StringWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField13(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapStringStringWithDefault = _field
	return offset, nil
}

func (p *DefaultValues) FastReadField14(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[string]*Simple, size)
	values := make([]Simple, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_val := &values[i]
		_val.InitDefault()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapStringSimpleWithDefault = _field
	return offset, nil
}

// for compatibility
func (p *DefaultValues) FastWrite(buf []byte) int {
	return 0
}

func (p *DefaultValues) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "DefaultValues")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("DefaultValues")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *DefaultValues) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ByteFieldWithDefault", thrift.BYTE, 1)
	offset += bthrift.Binary.WriteByte(buf[offset:], p.ByteFieldWithDefault)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I64FieldWithDefault", thrift.I64, 2)
	offset += bthrift.Binary.WriteI64(buf[offset:], p.I64FieldWithDefault)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "DoubleFieldWithDefault", thrift.DOUBLE, 3)
	offset += bthrift.Binary.WriteDouble(buf[offset:], p.DoubleFieldWithDefault)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I32FieldWithDefault", thrift.I32, 4)
	offset += bthrift.Binary.WriteI32(buf[offset:], p.I32FieldWithDefault)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "StringFieldWithDefault", thrift.STRING, 5)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.StringFieldWithDefault)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "BinaryFieldWithDefault", thrift.STRING, 6)
	offset += bthrift.Binary.WriteBinaryNocopy(buf[offset:], binaryWriter, []byte(p.BinaryFieldWithDefault))
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "EnumFieldWithDefault", thrift.I32, 7)
	offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.EnumFieldWithDefault))
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "SimpleStructWithDefault", thrift.STRUCT, 8)
	offset += p.SimpleStructWithDefault.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ListFieldWithDefault", thrift.LIST, 9)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
	var length int
	for _, v := range p.ListFieldWithDefault {
		length++
		offset += bthrift.Binary.WriteI32(buf[offset:], v)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "SetFieldWithDefault", thrift.SET, 10)
	setBeginOffset := offset
	offset += bthrift.Binary.SetBeginLength(thrift.I32, 0)

	for i := 0; i < len(p.SetFieldWithDefault); i++ {
		for j := i + 1; j < len(p.SetFieldWithDefault); j++ {
			if func(tgt, src int32) bool {
				if tgt != src {
					return false
				}
				return true
			}(p.SetFieldWithDefault[i], p.SetFieldWithDefault[j]) {
				panic(fmt.Errorf("%T error writing set field: slice is not unique", p.SetFieldWithDefault[i]))
			}
		}
	}
	var length int
	for _, v := range p.SetFieldWithDefault {
		length++
		offset += bthrift.Binary.WriteI32(buf[offset:], v)
	}
	bthrift.Binary.WriteSetBegin(buf[setBeginOffset:], thrift.I32, length)
	offset += bthrift.Binary.WriteSetEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapI32I64WithDefault", thrift.MAP, 11)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I64, 0)
	var length int
	for k, v := range p.MapI32I64WithDefault {
		length++
		offset += bthrift.Binary.WriteI32(buf[offset:], k)
		offset += bthrift.Binary.WriteI64(buf[offset:], v)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I64, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapI64StringWithDefault", thrift.MAP, 12)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.STRING, 0)
	var length int
	for k, v := range p.MapI64StringWithDefault {
		length++
		offset += bthrift.Binary.WriteI64(buf[offset:], k)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.STRING, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapStringStringWithDefault", thrift.MAP, 13)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
	var length int
	for k, v := range p.MapStringStringWithDefault {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapStringSimpleWithDefault", thrift.MAP, 14)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
	var length int
	for k, v := range p.MapStringSimpleWithDefault {
		length++
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *DefaultValues) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ByteFieldWithDefault", thrift.BYTE, 1)
	l += bthrift.Binary.ByteLength(p.ByteFieldWithDefault)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("I64FieldWithDefault", thrift.I64, 2)
	l += bthrift.Binary.I64Length(p.I64FieldWithDefault)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("DoubleFieldWithDefault", thrift.DOUBLE, 3)
	l += bthrift.Binary.DoubleLength(p.DoubleFieldWithDefault)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field4Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("I32FieldWithDefault", thrift.I32, 4)
	l += bthrift.Binary.I32Length(p.I32FieldWithDefault)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("StringFieldWithDefault", thrift.STRING, 5)
	l += bthrift.Binary.StringLengthNocopy(p.StringFieldWithDefault)
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field6Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("BinaryFieldWithDefault", thrift.STRING, 6)
	l += bthrift.Binary.BinaryLengthNocopy([]byte(p.BinaryFieldWithDefault))
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field7Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("EnumFieldWithDefault", thrift.I32, 7)
	l += bthrift.Binary.I32Length(int32(p.EnumFieldWithDefault))
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field8Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("SimpleStructWithDefault", thrift.STRUCT, 8)
	l += p.SimpleStructWithDefault.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field9Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("ListFieldWithDefault", thrift.LIST, 9)
	l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.ListFieldWithDefault))
	var tmpV int32
	l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.ListFieldWithDefault)
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field10Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("SetFieldWithDefault", thrift.SET, 10)
	l += bthrift.Binary.SetBeginLength(thrift.I32, len(p.SetFieldWithDefault))

	for i := 0; i < len(p.SetFieldWithDefault); i++ {
		for j := i + 1; j < len(p.SetFieldWithDefault); j++ {
			if func(tgt, src int32) bool {
				if tgt != src {
					return false
				}
				return true
			}(p.SetFieldWithDefault[i], p.SetFieldWithDefault[j]) {
				panic(fmt.Errorf("%T error writing set field: slice is not unique", p.SetFieldWithDefault[i]))
			}
		}
	}
	var tmpV int32
	l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.SetFieldWithDefault)
	l += bthrift.Binary.SetEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field11Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapI32I64WithDefault", thrift.MAP, 11)
	l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I64, len(p.MapI32I64WithDefault))
	var tmpK int32
	var tmpV int64
	l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I64Length(int64(tmpV))) * len(p.MapI32I64WithDefault)
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field12Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapI64StringWithDefault", thrift.MAP, 12)
	l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.STRING, len(p.MapI64StringWithDefault))
	for k, v := range p.MapI64StringWithDefault {

		l += bthrift.Binary.I64Length(k)
		l += bthrift.Binary.StringLengthNocopy(v)
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field13Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapStringStringWithDefault", thrift.MAP, 13)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.MapStringStringWithDefault))
	for k, v := range p.MapStringStringWithDefault {

		l += bthrift.Binary.StringLengthNocopy(k)
		l += bthrift.Binary.StringLengthNocopy(v)
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *DefaultValues) field14Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("MapStringSimpleWithDefault", thrift.MAP, 14)
	l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(p.MapStringSimpleWithDefault))
	for k, v := range p.MapStringSimpleWithDefault {

		l += bthrift.Binary.StringLengthNocopy(k)
		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *OptionalDefaultValues) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				l, err = p.FastReadField7(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField8(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField9(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.SET {
				l, err = p.FastReadField10(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField11(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField12(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField13(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField14(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OptionalDefaultValues[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OptionalDefaultValues) FastReadField1(buf []byte) (int, error) {
	offset := 0

	var _field int8
	if v, l, err := bthrift.Binary.ReadByte(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.ByteFieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField2(buf []byte) (int, error) {
	offset := 0

	var _field int64
	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I64FieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField3(buf []byte) (int, error) {
	offset := 0

	var _field float64
	if v, l, err := bthrift.Binary.ReadDouble(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.DoubleFieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField4(buf []byte) (int, error) {
	offset := 0

	var _field int32
	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.I32FieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField5(buf []byte) (int, error) {
	offset := 0

	var _field string
	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = v

	}
	p.StringFieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField6(buf []byte) (int, error) {
	offset := 0

	var _field []byte
	if v, l, err := bthrift.Binary.ReadBinary(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = []byte(v)

	}
	p.BinaryFieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField7(buf []byte) (int, error) {
	offset := 0

	var _field Enums
	if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		_field = Enums(v)

	}
	p.EnumFieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField8(buf []byte) (int, error) {
	offset := 0
	_field := NewSimple()
	if l, err := _field.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.SimpleStructWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField9(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.ListFieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField10(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadSetBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make([]int32, 0, size)
	for i := 0; i < size; i++ {
		var _elem int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_elem = v

		}

		_field = append(_field, _elem)
	}
	if l, err := bthrift.Binary.ReadSetEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.SetFieldWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField11(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[int32]int64, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, l, err := bthrift.Binary.ReadI32(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapI32I64WithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField12(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[int64]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapI64StringWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField13(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		var _val string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_val = v

		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapStringStringWithDefault = _field
	return offset, nil
}

func (p *OptionalDefaultValues) FastReadField14(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	_field := make(map[string]*Simple, size)
	values := make([]Simple, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l

			_key = v

		}

		_val := &values[i]
		_val.InitDefault()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_field[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.MapStringSimpleWithDefault = _field
	return offset, nil
}

// for compatibility
func (p *OptionalDefaultValues) FastWrite(buf []byte) int {
	return 0
}

func (p *OptionalDefaultValues) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "OptionalDefaultValues")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
		offset += p.fastWriteField7(buf[offset:], binaryWriter)
		offset += p.fastWriteField8(buf[offset:], binaryWriter)
		offset += p.fastWriteField9(buf[offset:], binaryWriter)
		offset += p.fastWriteField10(buf[offset:], binaryWriter)
		offset += p.fastWriteField11(buf[offset:], binaryWriter)
		offset += p.fastWriteField12(buf[offset:], binaryWriter)
		offset += p.fastWriteField13(buf[offset:], binaryWriter)
		offset += p.fastWriteField14(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *OptionalDefaultValues) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("OptionalDefaultValues")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
		l += p.field7Length()
		l += p.field8Length()
		l += p.field9Length()
		l += p.field10Length()
		l += p.field11Length()
		l += p.field12Length()
		l += p.field13Length()
		l += p.field14Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *OptionalDefaultValues) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetByteFieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ByteFieldWithDefault", thrift.BYTE, 1)
		offset += bthrift.Binary.WriteByte(buf[offset:], p.ByteFieldWithDefault)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetI64FieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I64FieldWithDefault", thrift.I64, 2)
		offset += bthrift.Binary.WriteI64(buf[offset:], p.I64FieldWithDefault)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetDoubleFieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "DoubleFieldWithDefault", thrift.DOUBLE, 3)
		offset += bthrift.Binary.WriteDouble(buf[offset:], p.DoubleFieldWithDefault)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetI32FieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "I32FieldWithDefault", thrift.I32, 4)
		offset += bthrift.Binary.WriteI32(buf[offset:], p.I32FieldWithDefault)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetStringFieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "StringFieldWithDefault", thrift.STRING, 5)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.StringFieldWithDefault)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetBinaryFieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "BinaryFieldWithDefault", thrift.STRING, 6)
		offset += bthrift.Binary.WriteBinaryNocopy(buf[offset:], binaryWriter, []byte(p.BinaryFieldWithDefault))
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField7(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetEnumFieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "EnumFieldWithDefault", thrift.I32, 7)
		offset += bthrift.Binary.WriteI32(buf[offset:], int32(p.EnumFieldWithDefault))
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField8(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSimpleStructWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "SimpleStructWithDefault", thrift.STRUCT, 8)
		offset += p.SimpleStructWithDefault.FastWriteNocopy(buf[offset:], binaryWriter)
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField9(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetListFieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "ListFieldWithDefault", thrift.LIST, 9)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.I32, 0)
		var length int
		for _, v := range p.ListFieldWithDefault {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField10(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSetFieldWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "SetFieldWithDefault", thrift.SET, 10)
		setBeginOffset := offset
		offset += bthrift.Binary.SetBeginLength(thrift.I32, 0)

		for i := 0; i < len(p.SetFieldWithDefault); i++ {
			for j := i + 1; j < len(p.SetFieldWithDefault); j++ {
				if func(tgt, src int32) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.SetFieldWithDefault[i], p.SetFieldWithDefault[j]) {
					panic(fmt.Errorf("%T error writing set field: slice is not unique", p.SetFieldWithDefault[i]))
				}
			}
		}
		var length int
		for _, v := range p.SetFieldWithDefault {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], v)
		}
		bthrift.Binary.WriteSetBegin(buf[setBeginOffset:], thrift.I32, length)
		offset += bthrift.Binary.WriteSetEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField11(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMapI32I64WithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapI32I64WithDefault", thrift.MAP, 11)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I64, 0)
		var length int
		for k, v := range p.MapI32I64WithDefault {
			length++
			offset += bthrift.Binary.WriteI32(buf[offset:], k)
			offset += bthrift.Binary.WriteI64(buf[offset:], v)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I32, thrift.I64, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField12(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMapI64StringWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapI64StringWithDefault", thrift.MAP, 12)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.I64, thrift.STRING, 0)
		var length int
		for k, v := range p.MapI64StringWithDefault {
			length++
			offset += bthrift.Binary.WriteI64(buf[offset:], k)
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.I64, thrift.STRING, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField13(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMapStringStringWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapStringStringWithDefault", thrift.MAP, 13)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, 0)
		var length int
		for k, v := range p.MapStringStringWithDefault {
			length++
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, v)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRING, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) fastWriteField14(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMapStringSimpleWithDefault() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "MapStringSimpleWithDefault", thrift.MAP, 14)
		mapBeginOffset := offset
		offset += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, 0)
		var length int
		for k, v := range p.MapStringSimpleWithDefault {
			length++
			offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, k)
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRING, thrift.STRUCT, length)
		offset += bthrift.Binary.WriteMapEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *OptionalDefaultValues) field1Length() int {
	l := 0
	if p.IsSetByteFieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("ByteFieldWithDefault", thrift.BYTE, 1)
		l += bthrift.Binary.ByteLength(p.ByteFieldWithDefault)
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field2Length() int {
	l := 0
	if p.IsSetI64FieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("I64FieldWithDefault", thrift.I64, 2)
		l += bthrift.Binary.I64Length(p.I64FieldWithDefault)
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field3Length() int {
	l := 0
	if p.IsSetDoubleFieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("DoubleFieldWithDefault", thrift.DOUBLE, 3)
		l += bthrift.Binary.DoubleLength(p.DoubleFieldWithDefault)
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field4Length() int {
	l := 0
	if p.IsSetI32FieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("I32FieldWithDefault", thrift.I32, 4)
		l += bthrift.Binary.I32Length(p.I32FieldWithDefault)
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field5Length() int {
	l := 0
	if p.IsSetStringFieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("StringFieldWithDefault", thrift.STRING, 5)
		l += bthrift.Binary.StringLengthNocopy(p.StringFieldWithDefault)
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field6Length() int {
	l := 0
	if p.IsSetBinaryFieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("BinaryFieldWithDefault", thrift.STRING, 6)
		l += bthrift.Binary.BinaryLengthNocopy([]byte(p.BinaryFieldWithDefault))
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field7Length() int {
	l := 0
	if p.IsSetEnumFieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("EnumFieldWithDefault", thrift.I32, 7)
		l += bthrift.Binary.I32Length(int32(p.EnumFieldWithDefault))
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field8Length() int {
	l := 0
	if p.IsSetSimpleStructWithDefault() {
		l += bthrift.Binary.FieldBeginLength("SimpleStructWithDefault", thrift.STRUCT, 8)
		l += p.SimpleStructWithDefault.BLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field9Length() int {
	l := 0
	if p.IsSetListFieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("ListFieldWithDefault", thrift.LIST, 9)
		l += bthrift.Binary.ListBeginLength(thrift.I32, len(p.ListFieldWithDefault))
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.ListFieldWithDefault)
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field10Length() int {
	l := 0
	if p.IsSetSetFieldWithDefault() {
		l += bthrift.Binary.FieldBeginLength("SetFieldWithDefault", thrift.SET, 10)
		l += bthrift.Binary.SetBeginLength(thrift.I32, len(p.SetFieldWithDefault))

		for i := 0; i < len(p.SetFieldWithDefault); i++ {
			for j := i + 1; j < len(p.SetFieldWithDefault); j++ {
				if func(tgt, src int32) bool {
					if tgt != src {
						return false
					}
					return true
				}(p.SetFieldWithDefault[i], p.SetFieldWithDefault[j]) {
					panic(fmt.Errorf("%T error writing set field: slice is not unique", p.SetFieldWithDefault[i]))
				}
			}
		}
		var tmpV int32
		l += bthrift.Binary.I32Length(int32(tmpV)) * len(p.SetFieldWithDefault)
		l += bthrift.Binary.SetEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field11Length() int {
	l := 0
	if p.IsSetMapI32I64WithDefault() {
		l += bthrift.Binary.FieldBeginLength("MapI32I64WithDefault", thrift.MAP, 11)
		l += bthrift.Binary.MapBeginLength(thrift.I32, thrift.I64, len(p.MapI32I64WithDefault))
		var tmpK int32
		var tmpV int64
		l += (bthrift.Binary.I32Length(int32(tmpK)) + bthrift.Binary.I64Length(int64(tmpV))) * len(p.MapI32I64WithDefault)
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field12Length() int {
	l := 0
	if p.IsSetMapI64StringWithDefault() {
		l += bthrift.Binary.FieldBeginLength("MapI64StringWithDefault", thrift.MAP, 12)
		l += bthrift.Binary.MapBeginLength(thrift.I64, thrift.STRING, len(p.MapI64StringWithDefault))
		for k, v := range p.MapI64StringWithDefault {

			l += bthrift.Binary.I64Length(k)
			l += bthrift.Binary.StringLengthNocopy(v)
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field13Length() int {
	l := 0
	if p.IsSetMapStringStringWithDefault() {
		l += bthrift.Binary.FieldBeginLength("MapStringStringWithDefault", thrift.MAP, 13)
		l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRING, len(p.MapStringStringWithDefault))
		for k, v := range p.MapStringStringWithDefault {

			l += bthrift.Binary.StringLengthNocopy(k)
			l += bthrift.Binary.StringLengthNocopy(v)
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *OptionalDefaultValues) field14Length() int {
	l := 0
	if p.IsSetMapStringSimpleWithDefault() {
		l += bthrift.Binary.FieldBeginLength("MapStringSimpleWithDefault", thrift.MAP, 14)
		l += bthrift.Binary.MapBeginLength(thrift.STRING, thrift.STRUCT, len(p.MapStringSimpleWithDefault))
		for k, v := range p.MapStringSimpleWithDefault {

			l += bthrift.Binary.StringLengthNocopy(k)
			l += v.BLength()
		}
		l += bthrift.Binary.MapEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}
