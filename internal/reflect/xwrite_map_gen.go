/*
 * Copyright 2025 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package reflect

import (
	"encoding/binary"
	"unsafe"

	"github.com/cloudwego/gopkg/unsafex"
	"github.com/cloudwego/gopkg/xbuf"
)

// This File is generated by xwrite_gen.sh. DO NOT EDIT.
// Template and code can be found in xwrite_map_gen_test.go.

func init() {
	registerMapXWriteFunc(tBYTE, tBYTE, xwriteMap_I08_I08)
	registerMapXWriteFunc(tBYTE, tI16, xwriteMap_I08_I16)
	registerMapXWriteFunc(tBYTE, tI32, xwriteMap_I08_I32)
	registerMapXWriteFunc(tBYTE, tI64, xwriteMap_I08_I64)
	registerMapXWriteFunc(tBYTE, tDOUBLE, xwriteMap_I08_I64)
	registerMapXWriteFunc(tBYTE, tENUM, xwriteMap_I08_ENUM)
	registerMapXWriteFunc(tBYTE, tSTRING, xwriteMap_I08_STRING)
	registerMapXWriteFunc(tBYTE, tSTRUCT, xwriteMap_I08_Other)
	registerMapXWriteFunc(tBYTE, tMAP, xwriteMap_I08_Other)
	registerMapXWriteFunc(tBYTE, tSET, xwriteMap_I08_Other)
	registerMapXWriteFunc(tBYTE, tLIST, xwriteMap_I08_Other)
	registerMapXWriteFunc(tI16, tBYTE, xwriteMap_I16_I08)
	registerMapXWriteFunc(tI16, tI16, xwriteMap_I16_I16)
	registerMapXWriteFunc(tI16, tI32, xwriteMap_I16_I32)
	registerMapXWriteFunc(tI16, tI64, xwriteMap_I16_I64)
	registerMapXWriteFunc(tI16, tDOUBLE, xwriteMap_I16_I64)
	registerMapXWriteFunc(tI16, tENUM, xwriteMap_I16_ENUM)
	registerMapXWriteFunc(tI16, tSTRING, xwriteMap_I16_STRING)
	registerMapXWriteFunc(tI16, tSTRUCT, xwriteMap_I16_Other)
	registerMapXWriteFunc(tI16, tMAP, xwriteMap_I16_Other)
	registerMapXWriteFunc(tI16, tSET, xwriteMap_I16_Other)
	registerMapXWriteFunc(tI16, tLIST, xwriteMap_I16_Other)
	registerMapXWriteFunc(tI32, tBYTE, xwriteMap_I32_I08)
	registerMapXWriteFunc(tI32, tI16, xwriteMap_I32_I16)
	registerMapXWriteFunc(tI32, tI32, xwriteMap_I32_I32)
	registerMapXWriteFunc(tI32, tI64, xwriteMap_I32_I64)
	registerMapXWriteFunc(tI32, tDOUBLE, xwriteMap_I32_I64)
	registerMapXWriteFunc(tI32, tENUM, xwriteMap_I32_ENUM)
	registerMapXWriteFunc(tI32, tSTRING, xwriteMap_I32_STRING)
	registerMapXWriteFunc(tI32, tSTRUCT, xwriteMap_I32_Other)
	registerMapXWriteFunc(tI32, tMAP, xwriteMap_I32_Other)
	registerMapXWriteFunc(tI32, tSET, xwriteMap_I32_Other)
	registerMapXWriteFunc(tI32, tLIST, xwriteMap_I32_Other)
	registerMapXWriteFunc(tI64, tBYTE, xwriteMap_I64_I08)
	registerMapXWriteFunc(tI64, tI16, xwriteMap_I64_I16)
	registerMapXWriteFunc(tI64, tI32, xwriteMap_I64_I32)
	registerMapXWriteFunc(tI64, tI64, xwriteMap_I64_I64)
	registerMapXWriteFunc(tI64, tDOUBLE, xwriteMap_I64_I64)
	registerMapXWriteFunc(tI64, tENUM, xwriteMap_I64_ENUM)
	registerMapXWriteFunc(tI64, tSTRING, xwriteMap_I64_STRING)
	registerMapXWriteFunc(tI64, tSTRUCT, xwriteMap_I64_Other)
	registerMapXWriteFunc(tI64, tMAP, xwriteMap_I64_Other)
	registerMapXWriteFunc(tI64, tSET, xwriteMap_I64_Other)
	registerMapXWriteFunc(tI64, tLIST, xwriteMap_I64_Other)
	registerMapXWriteFunc(tDOUBLE, tBYTE, xwriteMap_I64_I08)
	registerMapXWriteFunc(tDOUBLE, tI16, xwriteMap_I64_I16)
	registerMapXWriteFunc(tDOUBLE, tI32, xwriteMap_I64_I32)
	registerMapXWriteFunc(tDOUBLE, tI64, xwriteMap_I64_I64)
	registerMapXWriteFunc(tDOUBLE, tDOUBLE, xwriteMap_I64_I64)
	registerMapXWriteFunc(tDOUBLE, tENUM, xwriteMap_I64_ENUM)
	registerMapXWriteFunc(tDOUBLE, tSTRING, xwriteMap_I64_STRING)
	registerMapXWriteFunc(tDOUBLE, tSTRUCT, xwriteMap_I64_Other)
	registerMapXWriteFunc(tDOUBLE, tMAP, xwriteMap_I64_Other)
	registerMapXWriteFunc(tDOUBLE, tSET, xwriteMap_I64_Other)
	registerMapXWriteFunc(tDOUBLE, tLIST, xwriteMap_I64_Other)
	registerMapXWriteFunc(tENUM, tBYTE, xwriteMap_ENUM_I08)
	registerMapXWriteFunc(tENUM, tI16, xwriteMap_ENUM_I16)
	registerMapXWriteFunc(tENUM, tI32, xwriteMap_ENUM_I32)
	registerMapXWriteFunc(tENUM, tI64, xwriteMap_ENUM_I64)
	registerMapXWriteFunc(tENUM, tDOUBLE, xwriteMap_ENUM_I64)
	registerMapXWriteFunc(tENUM, tENUM, xwriteMap_ENUM_ENUM)
	registerMapXWriteFunc(tENUM, tSTRING, xwriteMap_ENUM_STRING)
	registerMapXWriteFunc(tENUM, tSTRUCT, xwriteMap_ENUM_Other)
	registerMapXWriteFunc(tENUM, tMAP, xwriteMap_ENUM_Other)
	registerMapXWriteFunc(tENUM, tSET, xwriteMap_ENUM_Other)
	registerMapXWriteFunc(tENUM, tLIST, xwriteMap_ENUM_Other)
	registerMapXWriteFunc(tSTRING, tBYTE, xwriteMap_STRING_I08)
	registerMapXWriteFunc(tSTRING, tI16, xwriteMap_STRING_I16)
	registerMapXWriteFunc(tSTRING, tI32, xwriteMap_STRING_I32)
	registerMapXWriteFunc(tSTRING, tI64, xwriteMap_STRING_I64)
	registerMapXWriteFunc(tSTRING, tDOUBLE, xwriteMap_STRING_I64)
	registerMapXWriteFunc(tSTRING, tENUM, xwriteMap_STRING_ENUM)
	registerMapXWriteFunc(tSTRING, tSTRING, xwriteMap_STRING_STRING)
	registerMapXWriteFunc(tSTRING, tSTRUCT, xwriteMap_STRING_Other)
	registerMapXWriteFunc(tSTRING, tMAP, xwriteMap_STRING_Other)
	registerMapXWriteFunc(tSTRING, tSET, xwriteMap_STRING_Other)
	registerMapXWriteFunc(tSTRING, tLIST, xwriteMap_STRING_Other)
	registerMapXWriteFunc(tSTRUCT, tBYTE, xwriteMap_Other_I08)
	registerMapXWriteFunc(tSTRUCT, tI16, xwriteMap_Other_I16)
	registerMapXWriteFunc(tSTRUCT, tI32, xwriteMap_Other_I32)
	registerMapXWriteFunc(tSTRUCT, tI64, xwriteMap_Other_I64)
	registerMapXWriteFunc(tSTRUCT, tDOUBLE, xwriteMap_Other_I64)
	registerMapXWriteFunc(tSTRUCT, tENUM, xwriteMap_Other_ENUM)
	registerMapXWriteFunc(tSTRUCT, tSTRING, xwriteMap_Other_STRING)
	registerMapXWriteFunc(tSTRUCT, tSTRUCT, xwriteMap_Other_Other)
	registerMapXWriteFunc(tSTRUCT, tMAP, xwriteMap_Other_Other)
	registerMapXWriteFunc(tSTRUCT, tSET, xwriteMap_Other_Other)
	registerMapXWriteFunc(tSTRUCT, tLIST, xwriteMap_Other_Other)
	registerMapXWriteFunc(tMAP, tBYTE, xwriteMap_Other_I08)
	registerMapXWriteFunc(tMAP, tI16, xwriteMap_Other_I16)
	registerMapXWriteFunc(tMAP, tI32, xwriteMap_Other_I32)
	registerMapXWriteFunc(tMAP, tI64, xwriteMap_Other_I64)
	registerMapXWriteFunc(tMAP, tDOUBLE, xwriteMap_Other_I64)
	registerMapXWriteFunc(tMAP, tENUM, xwriteMap_Other_ENUM)
	registerMapXWriteFunc(tMAP, tSTRING, xwriteMap_Other_STRING)
	registerMapXWriteFunc(tMAP, tSTRUCT, xwriteMap_Other_Other)
	registerMapXWriteFunc(tMAP, tMAP, xwriteMap_Other_Other)
	registerMapXWriteFunc(tMAP, tSET, xwriteMap_Other_Other)
	registerMapXWriteFunc(tMAP, tLIST, xwriteMap_Other_Other)
	registerMapXWriteFunc(tSET, tBYTE, xwriteMap_Other_I08)
	registerMapXWriteFunc(tSET, tI16, xwriteMap_Other_I16)
	registerMapXWriteFunc(tSET, tI32, xwriteMap_Other_I32)
	registerMapXWriteFunc(tSET, tI64, xwriteMap_Other_I64)
	registerMapXWriteFunc(tSET, tDOUBLE, xwriteMap_Other_I64)
	registerMapXWriteFunc(tSET, tENUM, xwriteMap_Other_ENUM)
	registerMapXWriteFunc(tSET, tSTRING, xwriteMap_Other_STRING)
	registerMapXWriteFunc(tSET, tSTRUCT, xwriteMap_Other_Other)
	registerMapXWriteFunc(tSET, tMAP, xwriteMap_Other_Other)
	registerMapXWriteFunc(tSET, tSET, xwriteMap_Other_Other)
	registerMapXWriteFunc(tSET, tLIST, xwriteMap_Other_Other)
	registerMapXWriteFunc(tLIST, tBYTE, xwriteMap_Other_I08)
	registerMapXWriteFunc(tLIST, tI16, xwriteMap_Other_I16)
	registerMapXWriteFunc(tLIST, tI32, xwriteMap_Other_I32)
	registerMapXWriteFunc(tLIST, tI64, xwriteMap_Other_I64)
	registerMapXWriteFunc(tLIST, tDOUBLE, xwriteMap_Other_I64)
	registerMapXWriteFunc(tLIST, tENUM, xwriteMap_Other_ENUM)
	registerMapXWriteFunc(tLIST, tSTRING, xwriteMap_Other_STRING)
	registerMapXWriteFunc(tLIST, tSTRUCT, xwriteMap_Other_Other)
	registerMapXWriteFunc(tLIST, tMAP, xwriteMap_Other_Other)
	registerMapXWriteFunc(tLIST, tSET, xwriteMap_Other_Other)
	registerMapXWriteFunc(tLIST, tLIST, xwriteMap_Other_Other)
}

func xwriteMap_I08_I08(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func xwriteMap_I08_I16(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I08_I32(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I08_I64(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I08_ENUM(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func xwriteMap_I08_STRING(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func xwriteMap_I08_Other(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		if t.V.IsPointer {
			err = t.V.XWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.XWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func xwriteMap_I16_I08(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func xwriteMap_I16_I16(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I16_I32(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I16_I64(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I16_ENUM(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func xwriteMap_I16_STRING(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func xwriteMap_I16_Other(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		if t.V.IsPointer {
			err = t.V.XWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.XWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func xwriteMap_I32_I08(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func xwriteMap_I32_I16(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I32_I32(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I32_I64(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I32_ENUM(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func xwriteMap_I32_STRING(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func xwriteMap_I32_Other(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		if t.V.IsPointer {
			err = t.V.XWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.XWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func xwriteMap_I64_I08(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func xwriteMap_I64_I16(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I64_I32(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I64_I64(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_I64_ENUM(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func xwriteMap_I64_STRING(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func xwriteMap_I64_Other(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		if t.V.IsPointer {
			err = t.V.XWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.XWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func xwriteMap_ENUM_I08(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func xwriteMap_ENUM_I16(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_ENUM_I32(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_ENUM_I64(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_ENUM_ENUM(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func xwriteMap_ENUM_STRING(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func xwriteMap_ENUM_Other(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		if t.V.IsPointer {
			err = t.V.XWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.XWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func xwriteMap_STRING_I08(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func xwriteMap_STRING_I16(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_STRING_I32(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_STRING_I64(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_STRING_ENUM(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func xwriteMap_STRING_STRING(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func xwriteMap_STRING_Other(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		if t.V.IsPointer {
			err = t.V.XWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.XWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func xwriteMap_Other_I08(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.XWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.XWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func xwriteMap_Other_I16(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.XWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.XWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_Other_I32(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.XWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.XWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_Other_I64(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.XWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.XWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func xwriteMap_Other_ENUM(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.XWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.XWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func xwriteMap_Other_STRING(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.XWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.XWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func xwriteMap_Other_Other(t *tType, b *xbuf.XWriteBuffer, p unsafe.Pointer) error {
	n := xwriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.XWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.XWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		if t.V.IsPointer {
			err = t.V.XWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.XWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}
