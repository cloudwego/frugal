/*
 * Copyright 2025 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package reflect

import (
	"encoding/binary"
	"unsafe"

	"github.com/cloudwego/gopkg/gridbuf"
	"github.com/cloudwego/gopkg/unsafex"
)

// This File is generated by gridWrite_gen.sh. DO NOT EDIT.
// Template and code can be found in gridwrite_map_gen_test.go.

func init() {
	registerMapGridWriteFunc(tBYTE, tBYTE, gridWriteMap_I08_I08)
	registerMapGridWriteFunc(tBYTE, tI16, gridWriteMap_I08_I16)
	registerMapGridWriteFunc(tBYTE, tI32, gridWriteMap_I08_I32)
	registerMapGridWriteFunc(tBYTE, tI64, gridWriteMap_I08_I64)
	registerMapGridWriteFunc(tBYTE, tDOUBLE, gridWriteMap_I08_I64)
	registerMapGridWriteFunc(tBYTE, tENUM, gridWriteMap_I08_ENUM)
	registerMapGridWriteFunc(tBYTE, tSTRING, gridWriteMap_I08_STRING)
	registerMapGridWriteFunc(tBYTE, tSTRUCT, gridWriteMap_I08_Other)
	registerMapGridWriteFunc(tBYTE, tMAP, gridWriteMap_I08_Other)
	registerMapGridWriteFunc(tBYTE, tSET, gridWriteMap_I08_Other)
	registerMapGridWriteFunc(tBYTE, tLIST, gridWriteMap_I08_Other)
	registerMapGridWriteFunc(tI16, tBYTE, gridWriteMap_I16_I08)
	registerMapGridWriteFunc(tI16, tI16, gridWriteMap_I16_I16)
	registerMapGridWriteFunc(tI16, tI32, gridWriteMap_I16_I32)
	registerMapGridWriteFunc(tI16, tI64, gridWriteMap_I16_I64)
	registerMapGridWriteFunc(tI16, tDOUBLE, gridWriteMap_I16_I64)
	registerMapGridWriteFunc(tI16, tENUM, gridWriteMap_I16_ENUM)
	registerMapGridWriteFunc(tI16, tSTRING, gridWriteMap_I16_STRING)
	registerMapGridWriteFunc(tI16, tSTRUCT, gridWriteMap_I16_Other)
	registerMapGridWriteFunc(tI16, tMAP, gridWriteMap_I16_Other)
	registerMapGridWriteFunc(tI16, tSET, gridWriteMap_I16_Other)
	registerMapGridWriteFunc(tI16, tLIST, gridWriteMap_I16_Other)
	registerMapGridWriteFunc(tI32, tBYTE, gridWriteMap_I32_I08)
	registerMapGridWriteFunc(tI32, tI16, gridWriteMap_I32_I16)
	registerMapGridWriteFunc(tI32, tI32, gridWriteMap_I32_I32)
	registerMapGridWriteFunc(tI32, tI64, gridWriteMap_I32_I64)
	registerMapGridWriteFunc(tI32, tDOUBLE, gridWriteMap_I32_I64)
	registerMapGridWriteFunc(tI32, tENUM, gridWriteMap_I32_ENUM)
	registerMapGridWriteFunc(tI32, tSTRING, gridWriteMap_I32_STRING)
	registerMapGridWriteFunc(tI32, tSTRUCT, gridWriteMap_I32_Other)
	registerMapGridWriteFunc(tI32, tMAP, gridWriteMap_I32_Other)
	registerMapGridWriteFunc(tI32, tSET, gridWriteMap_I32_Other)
	registerMapGridWriteFunc(tI32, tLIST, gridWriteMap_I32_Other)
	registerMapGridWriteFunc(tI64, tBYTE, gridWriteMap_I64_I08)
	registerMapGridWriteFunc(tI64, tI16, gridWriteMap_I64_I16)
	registerMapGridWriteFunc(tI64, tI32, gridWriteMap_I64_I32)
	registerMapGridWriteFunc(tI64, tI64, gridWriteMap_I64_I64)
	registerMapGridWriteFunc(tI64, tDOUBLE, gridWriteMap_I64_I64)
	registerMapGridWriteFunc(tI64, tENUM, gridWriteMap_I64_ENUM)
	registerMapGridWriteFunc(tI64, tSTRING, gridWriteMap_I64_STRING)
	registerMapGridWriteFunc(tI64, tSTRUCT, gridWriteMap_I64_Other)
	registerMapGridWriteFunc(tI64, tMAP, gridWriteMap_I64_Other)
	registerMapGridWriteFunc(tI64, tSET, gridWriteMap_I64_Other)
	registerMapGridWriteFunc(tI64, tLIST, gridWriteMap_I64_Other)
	registerMapGridWriteFunc(tDOUBLE, tBYTE, gridWriteMap_I64_I08)
	registerMapGridWriteFunc(tDOUBLE, tI16, gridWriteMap_I64_I16)
	registerMapGridWriteFunc(tDOUBLE, tI32, gridWriteMap_I64_I32)
	registerMapGridWriteFunc(tDOUBLE, tI64, gridWriteMap_I64_I64)
	registerMapGridWriteFunc(tDOUBLE, tDOUBLE, gridWriteMap_I64_I64)
	registerMapGridWriteFunc(tDOUBLE, tENUM, gridWriteMap_I64_ENUM)
	registerMapGridWriteFunc(tDOUBLE, tSTRING, gridWriteMap_I64_STRING)
	registerMapGridWriteFunc(tDOUBLE, tSTRUCT, gridWriteMap_I64_Other)
	registerMapGridWriteFunc(tDOUBLE, tMAP, gridWriteMap_I64_Other)
	registerMapGridWriteFunc(tDOUBLE, tSET, gridWriteMap_I64_Other)
	registerMapGridWriteFunc(tDOUBLE, tLIST, gridWriteMap_I64_Other)
	registerMapGridWriteFunc(tENUM, tBYTE, gridWriteMap_ENUM_I08)
	registerMapGridWriteFunc(tENUM, tI16, gridWriteMap_ENUM_I16)
	registerMapGridWriteFunc(tENUM, tI32, gridWriteMap_ENUM_I32)
	registerMapGridWriteFunc(tENUM, tI64, gridWriteMap_ENUM_I64)
	registerMapGridWriteFunc(tENUM, tDOUBLE, gridWriteMap_ENUM_I64)
	registerMapGridWriteFunc(tENUM, tENUM, gridWriteMap_ENUM_ENUM)
	registerMapGridWriteFunc(tENUM, tSTRING, gridWriteMap_ENUM_STRING)
	registerMapGridWriteFunc(tENUM, tSTRUCT, gridWriteMap_ENUM_Other)
	registerMapGridWriteFunc(tENUM, tMAP, gridWriteMap_ENUM_Other)
	registerMapGridWriteFunc(tENUM, tSET, gridWriteMap_ENUM_Other)
	registerMapGridWriteFunc(tENUM, tLIST, gridWriteMap_ENUM_Other)
	registerMapGridWriteFunc(tSTRING, tBYTE, gridWriteMap_STRING_I08)
	registerMapGridWriteFunc(tSTRING, tI16, gridWriteMap_STRING_I16)
	registerMapGridWriteFunc(tSTRING, tI32, gridWriteMap_STRING_I32)
	registerMapGridWriteFunc(tSTRING, tI64, gridWriteMap_STRING_I64)
	registerMapGridWriteFunc(tSTRING, tDOUBLE, gridWriteMap_STRING_I64)
	registerMapGridWriteFunc(tSTRING, tENUM, gridWriteMap_STRING_ENUM)
	registerMapGridWriteFunc(tSTRING, tSTRING, gridWriteMap_STRING_STRING)
	registerMapGridWriteFunc(tSTRING, tSTRUCT, gridWriteMap_STRING_Other)
	registerMapGridWriteFunc(tSTRING, tMAP, gridWriteMap_STRING_Other)
	registerMapGridWriteFunc(tSTRING, tSET, gridWriteMap_STRING_Other)
	registerMapGridWriteFunc(tSTRING, tLIST, gridWriteMap_STRING_Other)
	registerMapGridWriteFunc(tSTRUCT, tBYTE, gridWriteMap_Other_I08)
	registerMapGridWriteFunc(tSTRUCT, tI16, gridWriteMap_Other_I16)
	registerMapGridWriteFunc(tSTRUCT, tI32, gridWriteMap_Other_I32)
	registerMapGridWriteFunc(tSTRUCT, tI64, gridWriteMap_Other_I64)
	registerMapGridWriteFunc(tSTRUCT, tDOUBLE, gridWriteMap_Other_I64)
	registerMapGridWriteFunc(tSTRUCT, tENUM, gridWriteMap_Other_ENUM)
	registerMapGridWriteFunc(tSTRUCT, tSTRING, gridWriteMap_Other_STRING)
	registerMapGridWriteFunc(tSTRUCT, tSTRUCT, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tSTRUCT, tMAP, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tSTRUCT, tSET, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tSTRUCT, tLIST, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tMAP, tBYTE, gridWriteMap_Other_I08)
	registerMapGridWriteFunc(tMAP, tI16, gridWriteMap_Other_I16)
	registerMapGridWriteFunc(tMAP, tI32, gridWriteMap_Other_I32)
	registerMapGridWriteFunc(tMAP, tI64, gridWriteMap_Other_I64)
	registerMapGridWriteFunc(tMAP, tDOUBLE, gridWriteMap_Other_I64)
	registerMapGridWriteFunc(tMAP, tENUM, gridWriteMap_Other_ENUM)
	registerMapGridWriteFunc(tMAP, tSTRING, gridWriteMap_Other_STRING)
	registerMapGridWriteFunc(tMAP, tSTRUCT, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tMAP, tMAP, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tMAP, tSET, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tMAP, tLIST, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tSET, tBYTE, gridWriteMap_Other_I08)
	registerMapGridWriteFunc(tSET, tI16, gridWriteMap_Other_I16)
	registerMapGridWriteFunc(tSET, tI32, gridWriteMap_Other_I32)
	registerMapGridWriteFunc(tSET, tI64, gridWriteMap_Other_I64)
	registerMapGridWriteFunc(tSET, tDOUBLE, gridWriteMap_Other_I64)
	registerMapGridWriteFunc(tSET, tENUM, gridWriteMap_Other_ENUM)
	registerMapGridWriteFunc(tSET, tSTRING, gridWriteMap_Other_STRING)
	registerMapGridWriteFunc(tSET, tSTRUCT, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tSET, tMAP, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tSET, tSET, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tSET, tLIST, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tLIST, tBYTE, gridWriteMap_Other_I08)
	registerMapGridWriteFunc(tLIST, tI16, gridWriteMap_Other_I16)
	registerMapGridWriteFunc(tLIST, tI32, gridWriteMap_Other_I32)
	registerMapGridWriteFunc(tLIST, tI64, gridWriteMap_Other_I64)
	registerMapGridWriteFunc(tLIST, tDOUBLE, gridWriteMap_Other_I64)
	registerMapGridWriteFunc(tLIST, tENUM, gridWriteMap_Other_ENUM)
	registerMapGridWriteFunc(tLIST, tSTRING, gridWriteMap_Other_STRING)
	registerMapGridWriteFunc(tLIST, tSTRUCT, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tLIST, tMAP, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tLIST, tSET, gridWriteMap_Other_Other)
	registerMapGridWriteFunc(tLIST, tLIST, gridWriteMap_Other_Other)
}

func gridWriteMap_I08_I08(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func gridWriteMap_I08_I16(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I08_I32(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I08_I64(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I08_ENUM(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func gridWriteMap_I08_STRING(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func gridWriteMap_I08_Other(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		b.MallocN(1)[0] = *(*byte)(kp)
		if t.V.IsPointer {
			err = t.V.GridWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.GridWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func gridWriteMap_I16_I08(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func gridWriteMap_I16_I16(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I16_I32(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I16_I64(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I16_ENUM(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func gridWriteMap_I16_STRING(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func gridWriteMap_I16_Other(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(kp)))
		if t.V.IsPointer {
			err = t.V.GridWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.GridWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func gridWriteMap_I32_I08(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func gridWriteMap_I32_I16(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I32_I32(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I32_I64(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I32_ENUM(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func gridWriteMap_I32_STRING(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func gridWriteMap_I32_Other(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(kp)))
		if t.V.IsPointer {
			err = t.V.GridWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.GridWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func gridWriteMap_I64_I08(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func gridWriteMap_I64_I16(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I64_I32(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I64_I64(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_I64_ENUM(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func gridWriteMap_I64_STRING(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func gridWriteMap_I64_Other(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(kp)))
		if t.V.IsPointer {
			err = t.V.GridWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.GridWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func gridWriteMap_ENUM_I08(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func gridWriteMap_ENUM_I16(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_ENUM_I32(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_ENUM_I64(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_ENUM_ENUM(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func gridWriteMap_ENUM_STRING(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func gridWriteMap_ENUM_Other(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(kp))))
		if t.V.IsPointer {
			err = t.V.GridWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.GridWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func gridWriteMap_STRING_I08(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func gridWriteMap_STRING_I16(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_STRING_I32(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_STRING_I64(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_STRING_ENUM(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func gridWriteMap_STRING_STRING(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func gridWriteMap_STRING_Other(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		s = *((*string)(kp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
		if t.V.IsPointer {
			err = t.V.GridWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.GridWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}

func gridWriteMap_Other_I08(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.GridWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.GridWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		b.MallocN(1)[0] = *(*byte)(vp)
	}
	return checkMapN(n)
}

func gridWriteMap_Other_I16(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.GridWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.GridWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		binary.BigEndian.PutUint16(b.MallocN(2), *((*uint16)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_Other_I32(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.GridWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.GridWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		binary.BigEndian.PutUint32(b.MallocN(4), *((*uint32)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_Other_I64(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.GridWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.GridWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		binary.BigEndian.PutUint64(b.MallocN(8), *((*uint64)(vp)))
	}
	return checkMapN(n)
}

func gridWriteMap_Other_ENUM(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.GridWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.GridWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		binary.BigEndian.PutUint32(b.MallocN(4), uint32(*((*int64)(vp))))
	}
	return checkMapN(n)
}

func gridWriteMap_Other_STRING(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	var s string
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.GridWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.GridWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		s = *((*string)(vp))
		if len(s) < nocopyWriteThreshold {
			buf := b.MallocN(len(s) + 4)
			binary.BigEndian.PutUint32(buf, uint32(len(s)))
			copy(buf[4:], s)
		} else {
			binary.BigEndian.PutUint32(b.MallocN(4), uint32(len(s)))
			b.WriteDirect(unsafex.StringToBinary(s))
		}
	}
	return checkMapN(n)
}

func gridWriteMap_Other_Other(t *tType, b *gridbuf.WriteBuffer, p unsafe.Pointer) error {
	n := gridWriteMapHeader(t, b, p)
	if n == 0 {
		return nil
	}
	var err error
	it := newMapIter(rvWithPtr(t.RV, p))
	for kp, vp := it.Next(); kp != nil; kp, vp = it.Next() {
		n--
		if t.K.IsPointer {
			err = t.K.GridWriteFunc(t.K, b, *(*unsafe.Pointer)(kp))
		} else {
			err = t.K.GridWriteFunc(t.K, b, kp)
		}
		if err != nil {
			return err
		}
		if t.V.IsPointer {
			err = t.V.GridWriteFunc(t.V, b, *(*unsafe.Pointer)(vp))
		} else {
			err = t.V.GridWriteFunc(t.V, b, vp)
		}
		if err != nil {
			return err
		}
	}
	return checkMapN(n)
}
