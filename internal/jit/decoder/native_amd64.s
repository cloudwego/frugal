// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	LONG $0x24448948; BYTE $0x08               // movq         %rax, $8(%rsp)
	BYTE $0xc3                                 // retq
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

_do_skip:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x000447c7; WORD $0x0000; BYTE $0x00 // movl         $0, $4(%rdi)
	WORD $0x0f88                               // movb         %cl, (%rdi)
	WORD $0x3145; BYTE $0xff                   // xorl         %r15d, %r15d
	LONG $0xde058d4c; WORD $0x0003; BYTE $0x00 // leaq         $990(%rip), %r8  /* LJTI0_0(%rip) */
	LONG $0x2b0d8d4c; WORD $0x0004; BYTE $0x00 // leaq         $1067(%rip), %r9  /* _SkipSizeFixed(%rip) */
	LONG $0x24158d4c; WORD $0x0005; BYTE $0x00 // leaq         $1316(%rip), %r10  /* _WireTags(%rip) */
	WORD $0x3145; BYTE $0xdb                   // xorl         %r11d, %r11d
	BYTE $0x90                                 // .p2align 4, 0x90

LBB0_1:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x598d; BYTE $0x02                   // leal         $2(%rcx), %ebx
	WORD $0xfb80; BYTE $0x11                   // cmpb         $17, %bl
	LONG $0x03a1870f; WORD $0x0000             // ja           LBB0_61, $929(%rip)
	WORD $0xb60f; BYTE $0xdb                   // movzbl       %bl, %ebx
	LONG $0x981c6349                           // movslq       (%r8,%rbx,4), %rbx
	WORD $0x014c; BYTE $0xc3                   // addq         %r8, %rbx
	JMP  BX

LBB0_3:
	WORD $0xb60f; BYTE $0xc1       // movzbl       %cl, %eax
	LONG $0x0cbe0f4a; BYTE $0x08   // movsbq       (%rax,%r9), %rcx
	WORD $0x2948; BYTE $0xca       // subq         %rcx, %rdx
	LONG $0x03758c0f; WORD $0x0000 // jl           LBB0_59, $885(%rip)

LBB0_4:
	LONG $0xff448b42; BYTE $0x04   // movl         $4(%rdi,%r15,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0013840f; WORD $0x0000 // je           LBB0_6, $19(%rip)
	WORD $0xc083; BYTE $0xff       // addl         $-1, %eax
	LONG $0xff448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r15,8)
	LONG $0x00000ae9; BYTE $0x00   // jmp          LBB0_7, $10(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB0_6:
	LONG $0xffc78349 // addq         $-1, %r15

LBB0_7:
	WORD $0x0149; BYTE $0xcb // addq         %rcx, %r11

LBB0_8:
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x0351880f; WORD $0x0000 // js           LBB0_60, $849(%rip)
	WORD $0x0148; BYTE $0xce       // addq         %rcx, %rsi
	LONG $0x0cb60f42; BYTE $0xff   // movzbl       (%rdi,%r15,8), %ecx
	LONG $0xffff93e9; BYTE $0xff   // jmp          LBB0_1, $-109(%rip)

LBB0_10:
	LONG $0x05fa8348                           // cmpq         $5, %rdx
	LONG $0x032e8c0f; WORD $0x0000             // jl           LBB0_59, $814(%rip)
	WORD $0xb60f; BYTE $0x1e                   // movzbl       (%rsi), %ebx
	WORD $0xb60f; BYTE $0xcb                   // movzbl       %bl, %ecx
	LONG $0x113c8042; BYTE $0x00               // cmpb         $0, (%rcx,%r10)
	LONG $0x032c840f; WORD $0x0000             // je           LBB0_61, $812(%rip)
	WORD $0x468b; BYTE $0x01                   // movl         $1(%rsi), %eax
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0x0188840f; WORD $0x0000             // je           LBB0_38, $392(%rip)
	WORD $0xc80f                               // bswapl       %eax
	LONG $0x0cbe0f4a; BYTE $0x09               // movsbq       (%rcx,%r9), %rcx
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x0192840f; WORD $0x0000             // je           LBB0_40, $402(%rip)
	LONG $0xc8af0f48                           // imulq        %rax, %rcx
	LONG $0x05c18348                           // addq         $5, %rcx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0x2948; BYTE $0xca                   // subq         %rcx, %rdx
	LONG $0xff758d0f; WORD $0xffff             // jge          LBB0_4, $-139(%rip)
	LONG $0x0002f4e9; BYTE $0x00               // jmp          LBB0_61, $756(%rip)

LBB0_16:
	LONG $0xff448b42; BYTE $0x04   // movl         $4(%rdi,%r15,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0190840f; WORD $0x0000 // je           LBB0_41, $400(%rip)
	WORD $0xc083; BYTE $0xff       // addl         $-1, %eax
	LONG $0xff448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r15,8)
	WORD $0x894c; BYTE $0xf8       // movq         %r15, %rax
	LONG $0x03fe3d48; WORD $0x0000 // cmpq         $1022, %rax
	LONG $0x01898e0f; WORD $0x0000 // jle          LBB0_42, $393(%rip)
	LONG $0x0002d4e9; BYTE $0x00   // jmp          LBB0_18, $724(%rip)

LBB0_19:
	LONG $0x44b60f42; WORD $0x02ff             // movzbl       $2(%rdi,%r15,8), %eax
	LONG $0xff4c8b42; BYTE $0x04               // movl         $4(%rdi,%r15,8), %ecx
	WORD $0xc985                               // testl        %ecx, %ecx
	LONG $0x0191840f; WORD $0x0000             // je           LBB0_43, $401(%rip)
	WORD $0xc183; BYTE $0xff                   // addl         $-1, %ecx
	LONG $0xff4c8942; BYTE $0x04               // movl         %ecx, $4(%rdi,%r15,8)
	WORD $0xc1f6; BYTE $0x01                   // testb        $1, %cl
	LONG $0x4cb60f42; WORD $0x01ff             // movzbl       $1(%rdi,%r15,8), %ecx
	WORD $0xb60f; BYTE $0xc0                   // movzbl       %al, %eax
	WORD $0x440f; BYTE $0xc1                   // cmovel       %ecx, %eax
	LONG $0xfeff8149; WORD $0x0003; BYTE $0x00 // cmpq         $1022, %r15
	LONG $0x017e8e0f; WORD $0x0000             // jle          LBB0_44, $382(%rip)
	LONG $0x000298e9; BYTE $0x00               // jmp          LBB0_18, $664(%rip)

LBB0_21:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x04fa8348                           // cmpq         $4, %rdx
	LONG $0x027e8c0f; WORD $0x0000             // jl           LBB0_61, $638(%rip)
	WORD $0x0e8b                               // movl         (%rsi), %ecx
	WORD $0xc90f                               // bswapl       %ecx
	LONG $0x04c18348                           // addq         $4, %rcx
	WORD $0x2948; BYTE $0xca                   // subq         %rcx, %rdx
	LONG $0xfee98d0f; WORD $0xffff             // jge          LBB0_4, $-279(%rip)
	LONG $0x000268e9; BYTE $0x00               // jmp          LBB0_61, $616(%rip)

LBB0_24:
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0x02508e0f; WORD $0x0000             // jle          LBB0_59, $592(%rip)
	WORD $0xb60f; BYTE $0x0e                   // movzbl       (%rsi), %ecx
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x0159840f; WORD $0x0000             // je           LBB0_45, $345(%rip)
	LONG $0x113c8042; BYTE $0x00               // cmpb         $0, (%rcx,%r10)
	LONG $0x0248840f; WORD $0x0000             // je           LBB0_61, $584(%rip)
	LONG $0x1cbe0f4a; BYTE $0x09               // movsbq       (%rcx,%r9), %rbx
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0x01b9840f; WORD $0x0000             // je           LBB0_52, $441(%rip)
	LONG $0x03c38348                           // addq         $3, %rbx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0x2948; BYTE $0xda                   // subq         %rbx, %rdx
	LONG $0x02268c0f; WORD $0x0000             // jl           LBB0_61, $550(%rip)
	WORD $0x0149; BYTE $0xdb                   // addq         %rbx, %r11
	WORD $0x0148; BYTE $0xde                   // addq         %rbx, %rsi
	LONG $0x0cb60f42; BYTE $0xff               // movzbl       (%rdi,%r15,8), %ecx
	LONG $0xfffe62e9; BYTE $0xff               // jmp          LBB0_1, $-414(%rip)

LBB0_30:
	LONG $0x06fa8348                           // cmpq         $6, %rdx
	LONG $0x01fd8c0f; WORD $0x0000             // jl           LBB0_59, $509(%rip)
	LONG $0x36b60f44                           // movzbl       (%rsi), %r14d
	LONG $0xdeb60f41                           // movzbl       %r14b, %ebx
	LONG $0x133c8042; BYTE $0x00               // cmpb         $0, (%rbx,%r10)
	LONG $0x01f9840f; WORD $0x0000             // je           LBB0_61, $505(%rip)
	LONG $0x66b60f44; BYTE $0x01               // movzbl       $1(%rsi), %r12d
	LONG $0xccb60f41                           // movzbl       %r12b, %ecx
	LONG $0x113c8042; BYTE $0x00               // cmpb         $0, (%rcx,%r10)
	LONG $0x01e5840f; WORD $0x0000             // je           LBB0_61, $485(%rip)
	WORD $0x468b; BYTE $0x02                   // movl         $2(%rsi), %eax
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0x00fa840f; WORD $0x0000             // je           LBB0_47, $250(%rip)
	WORD $0xc80f                               // bswapl       %eax
	LONG $0x1cbe0f4a; BYTE $0x0b               // movsbq       (%rbx,%r9), %rbx
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0x0104840f; WORD $0x0000             // je           LBB0_49, $260(%rip)
	LONG $0x0cb60f42; BYTE $0x09               // movzbl       (%rcx,%r9), %ecx
	WORD $0xc984                               // testb        %cl, %cl
	LONG $0x00f7840f; WORD $0x0000             // je           LBB0_49, $247(%rip)
	LONG $0xc9be0f48                           // movsbq       %cl, %rcx
	WORD $0x0148; BYTE $0xd9                   // addq         %rbx, %rcx
	LONG $0xc8af0f48                           // imulq        %rax, %rcx
	LONG $0x06c18348                           // addq         $6, %rcx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0x2948; BYTE $0xca                   // subq         %rcx, %rdx
	LONG $0xfe1a8d0f; WORD $0xffff             // jge          LBB0_4, $-486(%rip)
	LONG $0x000199e9; BYTE $0x00               // jmp          LBB0_61, $409(%rip)

LBB0_38:
	LONG $0xff448b42; BYTE $0x04   // movl         $4(%rdi,%r15,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00f5840f; WORD $0x0000 // je           LBB0_50, $245(%rip)
	WORD $0xc083; BYTE $0xff       // addl         $-1, %eax
	LONG $0xff448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r15,8)
	LONG $0x0000ece9; BYTE $0x00   // jmp          LBB0_51, $236(%rip)

LBB0_40:
	LONG $0xff04c642; BYTE $0xfe // movb         $-2, (%rdi,%r15,8)
	LONG $0xff5c8842; BYTE $0x02 // movb         %bl, $2(%rdi,%r15,8)
	WORD $0xc083; BYTE $0xff     // addl         $-1, %eax
	LONG $0xff448942; BYTE $0x04 // movl         %eax, $4(%rdi,%r15,8)
	LONG $0xfbc28348             // addq         $-5, %rdx
	LONG $0x05c38349             // addq         $5, %r11
	LONG $0x05c68348             // addq         $5, %rsi
	LONG $0x0cb60f42; BYTE $0xff // movzbl       (%rdi,%r15,8), %ecx
	LONG $0xfffda3e9; BYTE $0xff // jmp          LBB0_1, $-605(%rip)

LBB0_41:
	LONG $0xff478d49               // leaq         $-1(%r15), %rax
	LONG $0x03fe3d48; WORD $0x0000 // cmpq         $1022, %rax
	LONG $0x01508f0f; WORD $0x0000 // jg           LBB0_18, $336(%rip)

LBB0_42:
	LONG $0x4cb60f42; WORD $0x02ff // movzbl       $2(%rdi,%r15,8), %ecx
	LONG $0x01788d4c               // leaq         $1(%rax), %r15
	LONG $0x08c74c88               // movb         %cl, $8(%rdi,%rax,8)
	QUAD $0x000000000cc744c7       // movl         $0, $12(%rdi,%rax,8)
	LONG $0x0cb60f42; BYTE $0xff   // movzbl       (%rdi,%r15,8), %ecx
	LONG $0xfffd73e9; BYTE $0xff   // jmp          LBB0_1, $-653(%rip)

LBB0_43:
	LONG $0xffc78349                           // addq         $-1, %r15
	LONG $0xfeff8149; WORD $0x0003; BYTE $0x00 // cmpq         $1022, %r15
	LONG $0x011f8f0f; WORD $0x0000             // jg           LBB0_18, $287(%rip)

LBB0_44:
	LONG $0xff448842; BYTE $0x08         // movb         %al, $8(%rdi,%r15,8)
	QUAD $0x0000000cff44c742; BYTE $0x00 // movl         $0, $12(%rdi,%r15,8)
	LONG $0x01c78349                     // addq         $1, %r15
	LONG $0x0cb60f42; BYTE $0xff         // movzbl       (%rdi,%r15,8), %ecx
	LONG $0xfffd46e9; BYTE $0xff         // jmp          LBB0_1, $-698(%rip)

LBB0_45:
	LONG $0xff448b42; BYTE $0x04   // movl         $4(%rdi,%r15,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00b2840f; WORD $0x0000 // je           LBB0_55, $178(%rip)
	WORD $0xc083; BYTE $0xff       // addl         $-1, %eax
	LONG $0xff448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r15,8)
	LONG $0x0000a9e9; BYTE $0x00   // jmp          LBB0_56, $169(%rip)

LBB0_47:
	LONG $0xff448b42; BYTE $0x04   // movl         $4(%rdi,%r15,8), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00ae840f; WORD $0x0000 // je           LBB0_57, $174(%rip)
	WORD $0xc083; BYTE $0xff       // addl         $-1, %eax
	LONG $0xff448942; BYTE $0x04   // movl         %eax, $4(%rdi,%r15,8)
	LONG $0x0000a5e9; BYTE $0x00   // jmp          LBB0_58, $165(%rip)

LBB0_49:
	LONG $0xff748846; BYTE $0x01 // movb         %r14b, $1(%rdi,%r15,8)
	LONG $0xff648846; BYTE $0x02 // movb         %r12b, $2(%rdi,%r15,8)
	LONG $0xff04c642; BYTE $0xff // movb         $-1, (%rdi,%r15,8)
	WORD $0xc001                 // addl         %eax, %eax
	WORD $0xc083; BYTE $0xff     // addl         $-1, %eax
	LONG $0xff448942; BYTE $0x04 // movl         %eax, $4(%rdi,%r15,8)
	LONG $0xfac28348             // addq         $-6, %rdx
	LONG $0x06c38349             // addq         $6, %r11
	LONG $0x06c68348             // addq         $6, %rsi
	LONG $0x0cb60f42; BYTE $0xff // movzbl       (%rdi,%r15,8), %ecx
	LONG $0xfffce3e9; BYTE $0xff // jmp          LBB0_1, $-797(%rip)

LBB0_50:
	LONG $0xffc78349 // addq         $-1, %r15

LBB0_51:
	LONG $0xfbc28348             // addq         $-5, %rdx
	LONG $0x05c38349             // addq         $5, %r11
	LONG $0x000005b9; BYTE $0x00 // movl         $5, %ecx
	LONG $0xfffd24e9; BYTE $0xff // jmp          LBB0_8, $-732(%rip)

LBB0_52:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x04fa8348                           // cmpq         $4, %rdx
	LONG $0x00708c0f; WORD $0x0000             // jl           LBB0_61, $112(%rip)
	LONG $0xfeff8149; WORD $0x0003; BYTE $0x00 // cmpq         $1022, %r15
	LONG $0x006c8f0f; WORD $0x0000             // jg           LBB0_18, $108(%rip)
	LONG $0xff4c8842; BYTE $0x08               // movb         %cl, $8(%rdi,%r15,8)
	QUAD $0x0000000cff44c742; BYTE $0x00       // movl         $0, $12(%rdi,%r15,8)
	LONG $0x01c78349                           // addq         $1, %r15
	LONG $0xfdc28348                           // addq         $-3, %rdx
	LONG $0x03c38349                           // addq         $3, %r11
	LONG $0x03c68348                           // addq         $3, %rsi
	LONG $0x0cb60f42; BYTE $0xff               // movzbl       (%rdi,%r15,8), %ecx
	LONG $0xfffc87e9; BYTE $0xff               // jmp          LBB0_1, $-889(%rip)

LBB0_55:
	LONG $0xffc78349 // addq         $-1, %r15

LBB0_56:
	LONG $0xffc28348             // addq         $-1, %rdx
	LONG $0x01c38349             // addq         $1, %r11
	LONG $0x000001b9; BYTE $0x00 // movl         $1, %ecx
	LONG $0xfffcc8e9; BYTE $0xff // jmp          LBB0_8, $-824(%rip)

LBB0_57:
	LONG $0xffc78349 // addq         $-1, %r15

LBB0_58:
	LONG $0xfac28348             // addq         $-6, %rdx
	LONG $0x06c38349             // addq         $6, %r11
	LONG $0x000006b9; BYTE $0x00 // movl         $6, %ecx
	LONG $0xfffcb2e9; BYTE $0xff // jmp          LBB0_8, $-846(%rip)

LBB0_59:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x000003e9; BYTE $0x00               // jmp          LBB0_61, $3(%rip)

LBB0_60:
	WORD $0x894c; BYTE $0xd8 // movq         %r11, %rax

LBB0_61:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB0_18:
	LONG $0xfdc0c748; WORD $0xffff; BYTE $0xff // movq         $-3, %rax
	LONG $0xffffebe9; BYTE $0xff               // jmp          LBB0_61, $-21(%rip)
	WORD $0x9090; BYTE $0x90                   // .p2align 2, 0x90

	// .set L0_0_set_16, LBB0_16-LJTI0_0
	// .set L0_0_set_19, LBB0_19-LJTI0_0
	// .set L0_0_set_61, LBB0_61-LJTI0_0
	// .set L0_0_set_3, LBB0_3-LJTI0_0
	// .set L0_0_set_21, LBB0_21-LJTI0_0
	// .set L0_0_set_24, LBB0_24-LJTI0_0
	// .set L0_0_set_30, LBB0_30-LJTI0_0
	// .set L0_0_set_10, LBB0_10-LJTI0_0
LJTI0_0:
	LONG $0xfffffcf4                           // .long L0_0_set_16
	LONG $0xfffffd1d                           // .long L0_0_set_19
	LONG $0xffffffe8                           // .long L0_0_set_61
	LONG $0xffffffe8                           // .long L0_0_set_61
	LONG $0xfffffc53                           // .long L0_0_set_3
	LONG $0xfffffc53                           // .long L0_0_set_3
	LONG $0xfffffc53                           // .long L0_0_set_3
	LONG $0xffffffe8                           // .long L0_0_set_61
	LONG $0xfffffc53                           // .long L0_0_set_3
	LONG $0xffffffe8                           // .long L0_0_set_61
	LONG $0xfffffc53                           // .long L0_0_set_3
	LONG $0xffffffe8                           // .long L0_0_set_61
	LONG $0xfffffc53                           // .long L0_0_set_3
	LONG $0xfffffd59                           // .long L0_0_set_21
	LONG $0xfffffd80                           // .long L0_0_set_24
	LONG $0xfffffdd2                           // .long L0_0_set_30
	LONG $0xfffffca1                           // .long L0_0_set_10
	LONG $0xfffffca1                           // .long L0_0_set_10
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

_SkipSizeFixed:
	QUAD $0x0002000801010000; WORD $0x0004; BYTE $0x08 // .ascii 11, '\x00\x00\x01\x01\x08\x00\x02\x00\x04\x00\x08'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000; BYTE $0x00                       // .space 5, '\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
_WireTags:
	QUAD $0x0001000101010000; QUAD $0x0101010101010001 // .ascii 16, '\x00\x00\x01\x01\x01\x00\x01\x00\x01\x00\x01\x01\x01\x01\x01\x01'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

TEXT Â·__do_skip(SB), NOSPLIT | NOFRAME, $0 - 0
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -40(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_do_skip:
	LEAQ Â·__native_entry__+16(SB), AX // _do_skip
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
